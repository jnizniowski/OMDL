# =============================================================================
# Configuration file for OMDL (Oh My DataLayer) - a tool for automated collection of dataLayer events.
# This file demonstrates all available configuration options and features.
# Use this as a template for your own configuration - copy, edit or remove sections as needed.
# Documentation and source code: https://github.com/jnizniowski/OMDL
# =============================================================================

# Required sections:
# - [config]   - General configuration
# - [step]     - At least one step definition
# - [sequence] - At least one sequence definition

[config]

# Optional configuration with default values.
# Edit, comment out, or remove.

# Basic setup (all optional)
title = "datalayer"                 # Base name for output files/sheets
retries = 2                         # Number of times to retry failed actions
default_timeout = 10                # How long to wait for elements to appear (in seconds)
default_delay = 1                   # Default waiting time between steps (in seconds) - you can add extra delay in steps
debug_mode = true                   # Adds debugging info to output file in a separate sheet - good for first runs (default: false)

# Browser behavior configuration (all optional)
include_selenium_info = false       # Add Selenium info to user agent - set to true if you want to be explicitly identified as a bot
bot_info = false                    # Add "?bot=true" parameter to URLs for transparency

css_elements_to_hide = [            # CSS selectors of elements to hide via injected CSS (default: empty)
    "#newsletter-modal",            # Useful for removing interfering elements, like modals or popups
    "section > .popup-overlay"
]


# Tracking script blocking (all optional, default: false)
block_ga4 = false                   # Block Google Analytics requests - useful when you want to avoid a mess in GA4 data
block_gtm = false                   # Block Google Tag Manager requests (be careful, GTM can contain some essential scripts, e.g. with DL pushes)
block_piwik = false                 # Block Piwik PRO scripts (same warning here, Piwik PRO has the Tag Manager module)

# Additional domains to block (optional)
block_domains = [                   # Block any domain requests (default: [])
    "consent.cookiebot.com",        # Useful for blocking CMPs (cookie banners)
    "analytics.example.com"         # other tracking tools or ssGTM containers
]

# User agent configuration (optional)
user_agents = [                     # A list of user agents. If more than one, scipt randomly selects one of them. Default: Chrome 91 on Windows 10
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.3 Safari/605.1.15"
]

# Events to track (optional)
track_events = [                   # List of dataLayer event names to track
    "view_item_list",              # If not specified - track all events (you can remove the entire track_events parameter)
    "select_item",                 # GA4 e-commerce events shown as example
    "view_item",                   
    "add_to_cart",
    "remove_from_cart",
    "view_cart",
    "begin_checkout",
    "add_shipping_info",
    "add_payment_info",
    "purchase"
]

#### Output configuration
output_destination = "excel"        # Optional: Where to save results: "excel" or "google_sheets"

output_folder = "results"           # Optional:  Where to save output files (default: current directory), applies only if output_destination = "excel"
# Alternative absolute paths:
# output_folder = "../omdl-results"                       # relative path
# output_folder = "/Users/username/Documents/results"     # absolute path on macOS/Linux
# output_folder = "C:\Users\username\Documents\results"   # absolute path on Windows


[config.google_sheets]      # Google Sheets configuration. Required only if output_destination = "google_sheets"

# Option 1: File-based credentials (default option)
credentials_location = "file"       # Where to look for Google API credentials 
                                    # (if incorrect or not available, "file" is a default value)

credentials_path = "credentials.json"    # Path to Google API credentials file (required if credentials_location = "file")
token_location = "file"                  # Where to store/look for auth token 
                                         # if equals "file", incorrect or not available, token.pickle file will be created in the same directory as credentials.json

# Option 2: Environment-based credentials (recommended for security reasons, but requires additional setup)
# credentials_location = "env"          # Will look for GOOGLE_SHEETS_CREDENTIALS_PATH
# token_location = "env"               # Will look for GOOGLE_SHEETS_TOKEN_PATH

folder_id = "your_folder_id_here"       # Optional - Google Drive folder ID (if not specified, it'll save the file in the root direcory)

# =============================================================================
# Step Definitions
# At least one step is required.
# Each step must have a type and type-specific required parameters.
# =============================================================================

###### 'visit' examples

# Navigate to URLs or mark pageviews - that's the beginning of every sequence
[step.homepage]
type = "visit"                      # Required - step type
url = "https://example-shop.com"    # will load this URL
delay_after = 2                     # A delay after loading the site (optional - uses default_delay if not specified)

# Only start a new step without page load (useful after clicks)
[step.view_cart]
type = "visit"
# delay_after = 2                   # still optional

# Randomize visits
[step.random_product_page]
type = "visit"
url = [                            # If URLs listed in [], one of them will be randomly chosen from the list
    "https://example-shop.com/product1", # It's useful to simplify testing similar pages (products, articles, etc.)
    "https://example-shop.com/product2",
    "https://example-shop.com/product3"
]


###### 'click' examples

# Interact with elements via mouse clicks on a current page
[step.accept_cookies]
type = "click"                      # Required - step type
clicks = [                          # List of elements to click in sequence (required at least one click)
    # Each click must have either xpath or selector (if both are available, XPath is used)
    # All clicks from the list will be executed at the given order
    { xpath = '//*[@id="cookie-accept"]' },            # Find element by XPath
    { selector = "#button-add-to-cart" },              # Find element by CSS selector
    { selector = "a" },                                # If more than one element matches the selector, it will be randomly picked
    { selector = "#button-confirm", delay_after = 1 }  # you can specify delay after each click in seconds (if not, default_delay is applied)
]                                  

[step.add_to_cart]
type = "click"
clicks = [ { selector = "a.cart-link" } ]   # At least one click required


###### 'form' examples

# Form steps - Fill in and submit forms on a current page
[step.login_form]
type = "form"                       # Required
fields = [                          # Required for form steps
    # Each field must have:
    # - Either xpath or selector (not both)
    # - value to input
    { selector = "#email", value = "test@example.com" },
    { selector = "#password", value = "test123" },
    { xpath = "//input[@name='remember']", value = "1" }
]
submit_button = "//button[@type='submit']"    # Button to click after filling form - must be XPath (required)
delay_after = 2                               # Custom delay - optional

[step.checkout_form]
type = "form"
fields = [                          # At least one field required
    { selector = "#firstName", value = "John" },
    { selector = "#lastName", value = "Doe" },
    { selector = "#address", value = "123 Test St" },
    { selector = "#city", value = "Test City" },
    { selector = "#zip", value = "12345" },
    { selector = "#phone", value = "123456789" }
]
submit_button = "//button[contains(@class,'checkout-submit')]"


###### 'scroll' examples

# Scroll steps - Control current page scrolling
[step.scroll_here]
type = "scroll"                     # Required

# Must have exactly ONE of: selector, xpath, pixels, or percentage
selector = ".product-list"          # Option 1: Scroll to element by CSS selector
#xpath = "/html/body/main/div[2]"   # Option 2: Scroll to element by XPath
#pixels = 500                       # Option 3: Scroll by pixel amount (must be > 0)
#percentage = 75                    # Option 4: Scroll to % of page (must be 0-100)

delay_after = 2                     # Custom delay (optional)


# =============================================================================
# Sequences
# At least one sequence is required.
# Each sequence must have at least one step.
# All referenced steps must be defined in [step] section.
# =============================================================================

[sequence.full_purchase]            # The name (here - "full_purchase") will be used as sheet name in the output file 
steps = [                           # Required - list of step names to execute
    "homepage",                     # Steps are executed in order
    "accept_cookies",               # Each step name must match a defined [step.name]
    "random_product_page",
    "scroll_here",
    "add_to_cart",
    "checkout_form"
]

[sequence.browse_products]          # You can create as many sequences as you like
steps = [                           # All sequences will be performed and saved to separate sheets
    "random_product_page",                 # You can use the same step multiple times
    "random_product_page",
    "random_product_page"
]